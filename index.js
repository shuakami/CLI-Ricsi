#!/usr/bin/env node
import inquirer from 'inquirer';
import chalk from 'chalk';
import ora from 'ora';
import figlet from 'figlet';
import { execSync, exec } from 'child_process';
import fs from 'fs';
import path from 'path';
import crypto from 'crypto';
import { spawn } from 'child_process';
import { fileURLToPath } from 'url';


const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

function displayWelcomeMessage() {
    console.log(chalk.cyan(figlet.textSync('CLI-Ricsi', { font: 'Slant' })));
    console.log(chalk.cyan('Version: 1.0.0\nAuthor: @Shukami\n'));
    checkNodeEnvironment();
}

function checkNodeEnvironment() {
    const spinner = ora(chalk.yellow('Ê≠£Âú®Ê£ÄÊµãNode.jsÁéØÂ¢É...')).start();

    try {
        const nodeVersion = execSync('node -v').toString().trim();
        spinner.succeed(chalk.green(`Ê£ÄÊµãÂà∞Node.jsÁâàÊú¨: ${nodeVersion}`));
        checkPackageManager('npm');
    } catch (error) {
        spinner.fail(chalk.red('Êú™Ê£ÄÊµãÂà∞Node.jsÁéØÂ¢ÉÔºåËØ∑ÂÆâË£ÖNode.js'));
        console.log(chalk.yellow('ËØ∑ËÆøÈóÆ https://nodejs.org/ ‰∏ãËΩΩÂπ∂ÂÆâË£ÖNode.js'));
    }
}

function checkPackageManager(packageManager) {
    const spinner = ora(chalk.yellow(`Ê≠£Âú®Ê£ÄÊµã${packageManager}ÁéØÂ¢É...`)).start();

    try {
        const version = execSync(`${packageManager} --version`).toString().trim();
        spinner.succeed(chalk.green(`Ê£ÄÊµãÂà∞${packageManager}ÁâàÊú¨: ${version}`));
        if (packageManager === 'npm') {
            checkPackageManager('pnpm');
        } else {
            detectNetworkEnvironment(); // After checking pnpm, proceed to network check
        }
    } catch (error) {
        spinner.fail(chalk.red(`Êú™Ê£ÄÊµãÂà∞${packageManager}ÁéØÂ¢É`));
        offerPackageManagerInstallation(packageManager);
    }
}

function offerPackageManagerInstallation(packageManager) {
    inquirer.prompt([
        {
            type: 'confirm',
            name: 'install',
            message: `Êú™Ê£ÄÊµãÂà∞${packageManager}ÔºåÊòØÂê¶Â∞ùËØïËá™Âä®ÂÆâË£Ö?`,
            default: true,
        }
    ]).then((answers) => {
        if (answers.install) {
            installPackageManager(packageManager);
        } else {
            console.log(chalk.yellow(`ËØ∑ÊâãÂä®ÂÆâË£Ö${packageManager}„ÄÇ`));
            if (packageManager === 'npm') {
                checkPackageManager('pnpm'); // Skip to next check
            } else {
                detectNetworkEnvironment(); // Proceed to network check
            }
        }
    });
}

function installPackageManager(packageManager) {
    const spinner = ora(chalk.yellow(`Â∞ùËØïÂÆâË£Ö${packageManager}...`)).start();
    let installCommand;

    if (packageManager === 'npm') {
        // npm is usually installed with Node.js; this is just for example
        installCommand = 'curl -L https://www.npmjs.com/install.sh | sh';
    } else if (packageManager === 'pnpm') {
        installCommand = 'npm install -g pnpm';
    }

    exec(installCommand, (error) => {
        if (error) {
            spinner.fail(chalk.red(`${packageManager}ÂÆâË£ÖÂ§±Ë¥•ÔºåËØ∑Â∞ùËØïÊâãÂä®ÂÆâË£Ö„ÄÇ`));
            console.log(chalk.yellow(`ËÆøÈóÆ${packageManager}ÂÆòÁΩëËé∑ÂèñÂÆâË£ÖÊåáÂØº„ÄÇ`));
            if (packageManager === 'npm') {
                checkPackageManager('pnpm'); // Skip to next check
            } else {
                detectNetworkEnvironment(); // Proceed to network check
            }
        } else {
            spinner.succeed(chalk.green(`${packageManager}ÂÆâË£ÖÊàêÂäü„ÄÇ`));
            if (packageManager === 'npm') {
                checkPackageManager('pnpm'); // Next check
            } else {
                detectNetworkEnvironment(); // Proceed to network check
            }
        }
    });
}

const urls = ['github.com', 'baidu.com', 'google.com', 'cn.bing.com'];
let networkStatus = { 'github.com': false, 'baidu.com': false, 'google.com': false, 'cn.bing.com': false };

async function checkNetwork(url) {
    return new Promise((resolve) => {
        // Ê†πÊçÆÊìç‰ΩúÁ≥ªÁªüÈÄâÊã©ÈÄÇÂΩìÁöÑÂëΩ‰ª§
        const command = process.platform === "win32" ?
            `ping -n 1 -w 150 ${url}` : // ÂØπ‰∫éWindowsÁ≥ªÁªü
            `ping -c 1 -W 1 ${url}`; // ÂØπ‰∫éUnix/LinuxÁ≥ªÁªü

        exec(command, (error) => {
            networkStatus[url] = !error;
            resolve(!error);
        });
    });
}


async function detectNetworkEnvironment() {
    const spinner = ora(chalk.yellow('Ê≠£Âú®Ê£ÄÊµãÁΩëÁªúÁéØÂ¢É...')).start();
    await Promise.all(urls.map(url => checkNetwork(url)));
    spinner.stop();

    // Âà§Êñ≠ÁΩëÁªúÁéØÂ¢É
    const isInternational = networkStatus['github.com'] && networkStatus['google.com'];

    if (isInternational) {
        console.log(chalk.green('üéâÊ£ÄÊµãÂà∞ÂõΩÂ§ñÁΩëÁªúÁéØÂ¢ÉÔºå‰ΩøÁî®GitHubÂéüÂßã‰ªìÂ∫ìÊ∫ê„ÄÇ'));
        cloneRepository('https://github.com/shuakami/wuhu-home-Caidan.git');
    } else {
        console.log(chalk.green('üê≥Ê£ÄÊµãÂà∞ÂõΩÂÜÖÁΩëÁªúÁéØÂ¢ÉÔºå‰ΩøÁî®ÂõΩÂÜÖÈïúÂÉèÊ∫ê„ÄÇ'));
        cloneRepository('https://githubfast.com/shuakami/wuhu-home-Caidan.git');
    }
}


function cloneRepository(repoUrl) {
    const repoName = repoUrl.split('/').pop().replace('.git', ''); // Ëé∑Âèñ‰ªìÂ∫ìÂêçÔºåÂπ∂ÂéªÈô§.gitÂêéÁºÄ
    const spinner = ora(chalk.yellow(`Ê≠£Âú®‰ªé ${repoUrl} ÊãâÂèñ‰ªìÂ∫ì ${repoName}...`)).start();

    if (fs.existsSync(repoName)) {
        spinner.warn(chalk.yellow(`${repoName} ‰ªìÂ∫ìÂ∑≤Â≠òÂú®„ÄÇ`));
        inquirer.prompt([
            {
                type: 'confirm',
                name: 'deleteAndClone',
                message: 'ÊÇ®Â∑≤ÁªèÊãâÂèñËøáËØ•‰ªìÂ∫ì„ÄÇË¶ÅÂà†Èô§Âπ∂ÈáçÊñ∞ÊãâÂèñÂêóÔºü',
                default: false,
            }
        ]).then((answers) => {
            if (answers.deleteAndClone) {
                fs.rmSync(repoName, { recursive: true, force: true }); // ‰ΩøÁî®fsÂà†Èô§Â∑≤Â≠òÂú®ÁöÑ‰ªìÂ∫ìÊñá‰ª∂Â§π
                executeGitClone(repoUrl, spinner);
            } else {
                // Ê£ÄÊµã‰ªìÂ∫ìÂÆåÊï¥ÊÄßÁöÑÈÄâÈ°π
                inquirer.prompt([
                    {
                        type: 'confirm',
                        name: 'checkIntegrity',
                        message: 'Ë¶ÅÊ£ÄÊµãÁé∞Êúâ‰ªìÂ∫ìÁöÑÂÆåÊï¥ÊÄßÂêóÔºüÔºàÊ≥®ÔºöÂ¶ÇÊûú‰Ω†Â∑≤ÁªèÂÆâË£ÖËøá‰æùËµñÔºå‰∏çË¶ÅÂ∞ùËØïÊ≠§ÈÄâÈ°πÔºå‰ºöÂØºËá¥‰Ω†Âç°Ê≠ªÔºâ',
                        default: true,
                    }
                ]).then((answers) => {
                    if (answers.checkIntegrity) {
                        checkRepoIntegrity(repoName, repoUrl, spinner);
                    } else {
                        spinner.info(chalk.yellow('‰øùÁïôÁé∞Êúâ‰ªìÂ∫ìÔºåÊú™ËøõË°å‰ªª‰ΩïÊìç‰Ωú„ÄÇ'));
                        executeNextStep(); // Á°Æ‰øùÂú®Ê≠§ÂàÜÊîØ‰πüË∞ÉÁî®executeNextStepÁªßÁª≠ÊâßË°åÂêéÁª≠Ê≠•È™§
                    }
                });
            }
        });
    } else {
        executeGitClone(repoUrl, spinner);
    }
}

function checkRepoIntegrity(repoName, repoUrl, spinner) {
    try {
        const directoryMD5 = calculateDirectoryMD5(repoName);
        const expectedMD5 = "467bcf27a0716dc3b48905cb87ca993f";
        if (directoryMD5 === expectedMD5) {
            spinner.succeed(chalk.green('‰ªìÂ∫ìÂÆåÊï¥ÊÄßÈÄöËøáMD5ÂìàÂ∏åÊ£ÄÊµã„ÄÇ'));
            executeNextStep(); // ÂÆåÊï¥ÊÄßÊ£ÄÊü•ÈÄöËøáÂêéÁªßÁª≠
        } else {
            throw new Error('ÂìàÂ∏åÂÄº‰∏çÂåπÈÖç');
        }
    } catch (error) {
        console.warn(chalk.yellow(`MD5Ê£ÄÊµãÂ§±Ë¥•: ${error.message}ÔºåÊ≠£Âú®Â∞ùËØïÁõÆÂΩïÂ§ßÂ∞èÂíåÊñá‰ª∂Êï∞ÈáèÊ£ÄÊµã...`));
        const { fileCount, totalSize } = getDirectoryStats(repoName);
        const expectedSizeLowerBound = 21500000; // 21.5 MB
        const expectedSizeUpperBound = 22609920; // 22.60992 MB
        const expectedFileCount = 111;

        if (totalSize >= expectedSizeLowerBound && totalSize <= expectedSizeUpperBound && fileCount >= expectedFileCount) {
            spinner.succeed(chalk.green('‰ªìÂ∫ìÂÆåÊï¥ÊÄßÈÄöËøáÁõÆÂΩïÂ§ßÂ∞èÂíåÊñá‰ª∂Êï∞ÈáèÊ£ÄÊµã„ÄÇ'));
            executeNextStep(); // Âç≥‰ΩøÈÄöËøáÁõÆÂΩïÂ§ßÂ∞èÂíåÊñá‰ª∂Êï∞ÈáèÊ£ÄÊµãÔºå‰πüÁªßÁª≠ÊâßË°å
        } else {
            promptForReclone(spinner, repoName, repoUrl);
        }
    }
}

function promptForReclone(spinner, repoName, repoUrl) {
    spinner.warn(chalk.yellow('‰ªìÂ∫ìÂèØËÉΩ‰∏çÂÆåÊï¥ÔºåÊòØÂê¶ÈáçÊñ∞ÊãâÂèñÔºü'));
    inquirer.prompt([
        {
            type: 'confirm',
            name: 'reClone',
            message: 'Ë¶ÅÂà†Èô§ÂΩìÂâç‰ªìÂ∫ìÂπ∂ÈáçÊñ∞ÊãâÂèñÂêóÔºü',
            default: false,
        }
    ]).then((answers) => {
        if (answers.reClone) {
            fs.rmSync(repoName, { recursive: true, force: true });
            executeGitClone(repoUrl, spinner);
        } else {
            executeNextStep(); // Âç≥‰ΩøÁî®Êà∑ÂÜ≥ÂÆö‰∏çÈáçÊñ∞ÊãâÂèñÔºå‰πüÂ∫îÁªßÁª≠ÊâßË°å
        }
    });
}




function getDirectoryStats(dirPath) {
    let fileCount = 0;
    let totalSize = 0;

    function calculateStats(dir) {
        const files = fs.readdirSync(dir);

        for (const file of files) {
            const filePath = path.join(dir, file);
            const stat = fs.statSync(filePath);

            if (stat.isDirectory()) {
                calculateStats(filePath);
            } else {
                fileCount += 1;
                totalSize += stat.size;
            }
        }
    }

    calculateStats(dirPath);
    return { fileCount, totalSize };
}

function calculateDirectoryMD5(directoryPath) {
    let hashes = '';

    function calculateFileHash(filePath) {
        const fileBuffer = fs.readFileSync(filePath);
        const hashSum = crypto.createHash('md5');
        hashSum.update(fileBuffer);
        const hex = hashSum.digest('hex');
        return hex;
    }

    function readDirectory(directory) {
        const items = fs.readdirSync(directory);
        for (const item of items) {
            const fullPath = path.join(directory, item);
            const stats = fs.statSync(fullPath);
            if (stats.isDirectory()) {
                readDirectory(fullPath);
            } else {
                hashes += calculateFileHash(fullPath) + '\n';
            }
        }
    }

    readDirectory(directoryPath);
    const combinedHash = crypto.createHash('md5').update(hashes).digest('hex');
    return combinedHash;
}


function executeGitClone(repoUrl, spinner) {
    spinner.text = `Ê≠£Âú®‰ªé ${repoUrl} ÊãâÂèñ‰ªìÂ∫ì...`;
    spinner.start();

    exec(`git clone ${repoUrl}`, (error) => {
        if (error) {
            spinner.fail(chalk.red(`‰ªìÂ∫ìÊãâÂèñÂ§±Ë¥•ÔºåËØ∑Ê£ÄÊü•gitÈÖçÁΩÆÊàñÁΩëÁªúËøûÊé•„ÄÇÈîôËØØ‰ø°ÊÅØÔºö${error.message}`));
            executeNextStep(); // Âç≥‰ΩøÊãâÂèñÂ§±Ë¥•Ôºå‰πüÁ°Æ‰øùË∞ÉÁî®executeNextStepÁªßÁª≠ÊâßË°å
        } else {
            spinner.succeed(chalk.green('‰ªìÂ∫ìÊàêÂäüÊãâÂèñ„ÄÇ'));
            executeNextStep(); // ÊãâÂèñÊàêÂäüÂêéÁªßÁª≠ÊâßË°å
        }
    });
}


function executeNextStep() {
    console.log(chalk.cyan('ÂºÄÂßãÊâßË°åÂÆâË£ÖÈÉ®ÂàÜ...'));
    const scriptPath = path.join(__dirname, 'step1.js');
    const subprocess = spawn('node', [scriptPath], { stdio: 'inherit' });

    subprocess.on('close', (code) => {
        if (code === 0) {
            console.log(chalk.green('ÊâßË°åÂÆåÊàê'));
        } else {
            console.error(chalk.red(`Â≠êËøõÁ®ãÈÄÄÂá∫Á†ÅÔºö${code}`));
        }
    });
}
displayWelcomeMessage();
